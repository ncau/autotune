apiVersion: "recommender.com/v1"
kind: "KruizePerformanceProfile"
metadata:
  name: "resource-optimization-openshift"
profile_version: 2.0
k8s_type: openshift

slo:
  slo_class: "resource_usage"
  direction: "minimize"

  # Refer to src/.../performanceProfiles/PerformanceProfileInterface/RemoteMonitoringOpenShiftImpl.java
  objective_function:
    function_type: source

  function_variables:
  # CPU Request
  # Show cpu requests in cores for a container in a deployment
  - name: cpuRequest
    datasource: prometheus
    value_type: "double"
    kubernetes_object: "container"

    aggregation_functions:
    - function: 'avg'
      query: 'avg by(container, namespace)(kube_pod_container_resource_requests{container!="", container!="POD", pod!="", resource="cpu", unit="core", namespace="$NAMESPACE$", container="$CONTAINER_NAME$"})'

    # Show sum of cpu requests in bytes for a container in a deployment
    - function: 'sum'
      query: 'sum by(container, namespace)(kube_pod_container_resource_requests{container!="", container!="POD", pod!="", resource="cpu", unit="core", namespace="$NAMESPACE$", container="$CONTAINER_NAME$"})'


  # CPU Limit
  # Show cpu limits in bytes for a container in a deployment
  - name: cpuLimit
    datasource: prometheus
    value_type: "double"
    kubernetes_object: "container"

    aggregation_functions:
    - function: avg
      query: 'avg by(container, namespace)(kube_pod_container_resource_limits{container!="", container!="POD", pod!="", resource="cpu", unit="core", namespace="$NAMESPACE$", container="$CONTAINER_NAME$"})'

    # Show sum of cpu limits in bytes for a container in a deployment
    - function: sum
      query: 'sum by(container, namespace)(kube_pod_container_resource_limits{container!="", container!="POD", pod!="", resource="cpu", unit="core", namespace="$NAMESPACE$", container="$CONTAINER_NAME$"})'


  # CPU Usage
  # CPU Usage query uses recording rule to get the data. Recording rule has changed
  # between openshift 4.8 and 4.9 versions. Until openshift v4.8, cpu usage recording
  # rule used "rate" function and from openshift v4.9, it is using "irate". As the
  # metric name was also changed from 
  # "node_namespace_pod_container:container_cpu_usage_seconds_total:sum_rate" to 
  # "node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate",
  # mentioning both the queries below as we need to use one of them based on the
  # openshift version.

  # Average CPU per container in a deployment
  - name: cpuUsage
    datasource: prometheus
    value_type: "double"
    kubernetes_object: "container"

    # For openshift versions <=4.8
    aggregation_functions:
    - function: avg
      query: 'avg by(container, namespace)(avg_over_time(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_rate{container!="", container!="POD", pod!="", namespace="$NAMESPACE$", container="$CONTAINER_NAME$"}[15m]))'
      versions: "<=4.8"

    # For openshift versions >=4.9
    - function: avg
      query: 'avg by(container, namespace)(avg_over_time(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{container!="", container!="POD", pod!="", namespace="$NAMESPACE$", container=”$CONTAINER_NAME$”}[15m]))'
      versions: ">4.9"

    # Approx minimum CPU per container in a deployment
    # For openshift versions <=4.8
    - function: min
      query: 'min by(container, namespace)(min_over_time(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_rate{container!="", container!="POD", pod!="", namespace="$NAMESPACE$", container="$CONTAINER_NAME$"}[15m]))'
      versions: "<=4.8"

    # For openshift versions >=4.9
    - function: min
      query: 'min by(container, namespace)(min_over_time(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{container!="", container!="POD", pod!="", namespace="$NAMESPACE$", container="$CONTAINER_NAME$"}[15m]))'
      versions: ">4.9"

    # Approx maximum CPU per container in a deployment
    # For openshift versions <=4.8
    - function: max
      query: 'max by(container, namespace)(max_over_time(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_rate{container!="", container!="POD", pod!="", namespace="$NAMESPACE$", container="$CONTAINER_NAME$"}[15m]))'
      versions: "<=4.8"

    # For openshift versions >=4.9
    - function: max
      query: 'max by(container, namespace)(max_over_time(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{container!="", container!="POD", pod!="", namespace="$NAMESPACE$", container="$CONTAINER_NAME$"}[15m]))'
      versions: ">4.9"

    # Sum of CPU usage for a container in all pods of a deployment
    # For openshift versions <=4.8
    - function: sum
      query: 'sum by(container, namespace)(avg_over_time(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_rate{container!="", container!="POD", pod!="", namespace="$NAMESPACE$", container="$CONTAINER_NAME$"}[15m]))'
      versions: "<=4.8"

    # For openshift versions >=4.9
    - function: sum
      query: 'sum by(container, namespace)(avg_over_time(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{container!="", container!="POD", pod!="", namespace="$NAMESPACE$", container="$CONTAINER_NAME$"}[15m]))'
      versions: ">4.9"


  # CPU Throttling
  - name: cpuThrottle
    datasource: prometheus
    value_type: "double"
    kubernetes_object: "container"

    aggregation_functions:
    # Average CPU throttling per container in a deployment
    - function: avg
      query: 'avg by(container, namespace)(rate(container_cpu_cfs_throttled_seconds_total{container!="", container!="POD", pod!="", namespace="$NAMESPACE$", container=”$CONTAINER_NAME$”}[15m]))'

    # Maximum CPU throttling per container in a deployment
    - function: max
      query: 'max by(container, namespace)(rate(container_cpu_cfs_throttled_seconds_total{container!="", container!="POD", pod!="", namespace="$NAMESPACE$", container=”$CONTAINER_NAME$”}[15m]))'

    # Sum of CPU throttling for a container in all pods of a deployment
    - function: sum
      query: 'sum by(container, namespace)(rate(container_cpu_cfs_throttled_seconds_total{container!="", container!="POD", pod!="", namespace="$NAMESPACE$", container=”$CONTAINER_NAME$”}[15m]))'



######################

  # Memory Request
  # Show memory requests in bytes for a container in a deployment
  - name: memoryRequest
    datasource: prometheus
    value_type: "double"
    kubernetes_object: "container"

    aggregation_functions:
    - function: avg
      query: 'avg by(container, namespace)(kube_pod_container_resource_requests{container!="", container!="POD", pod!="", resource="memory", unit="byte", namespace="$NAMESPACE$", container="$CONTAINER_NAME$"})'

    # Show sum of memory requests in bytes for a container in a deployment
    - function: sum
      query: 'sum by(container, namespace)(kube_pod_container_resource_requests{container!="", container!="POD", pod!="", resource="memory", unit="byte", namespace="$NAMESPACE$", container="$CONTAINER_NAME$"})'


  # Memory Limit
  # Show memory limits in bytes for a container in a deployment
  - name: memoryLimit
    datasource: prometheus
    value_type: "double"
    kubernetes_object: "container"

    aggregation_functions:
    - function: avg
      query: 'avg by(container, namespace)(kube_pod_container_resource_limits{container!="", container!="POD", pod!="", resource="memory", unit="byte", namespace="$NAMESPACE$", container="$CONTAINER_NAME$"})'

    # Show sum of memory limits in bytes for a container in a deployment
    - function: sum
      query: 'sum by(container, namespace)(kube_pod_container_resource_limits{container!="", container!="POD", pod!="", resource="memory", unit="byte", namespace="$NAMESPACE$", container="$CONTAINER_NAME$"})'


  # Memory Usage
  # Average memory per container in a deployment
  - name: memoryUsage
    datasource: prometheus
    value_type: "double"
    kubernetes_object: "container"

    aggregation_functions:
    - function: avg
      query: 'avg by(container, namespace)(avg_over_time(container_memory_working_set_bytes{container!="", container!="POD", pod!="", namespace=$NAMESPACE$, container=”$CONTAINER_NAME$”}[15m]))'

    # Approx minimum memory per container in a deployment
    - function: min
      query: 'min by(container, namespace)(min_over_time(container_memory_working_set_bytes{container!="", container!="POD", pod!="", namespace=$NAMESPACE$, container="$CONTAINER_NAME$"}[15m]))'

    # Approx maximum memory per container in a deployment
    - function: max
      query: 'max by(container, namespace)(max_over_time(container_memory_working_set_bytes{container!="", container!="POD", pod!="", namespace=$NAMESPACE$, container="$CONTAINER_NAME$"}[15m]))'

    # Sum of memory usage for a contianer in all pods of a deployment
    - function: sum
      query: 'sum by(container, namespace)(avg_over_time(container_memory_working_set_bytes{container!="", container!="POD", pod!="", namespace=$NAMESPACE$, container="$CONTAINER_NAME$"}[15m]))'


  # 2.4 Memory RSS
  - name: memoryRSS
    datasource: prometheus
    value_type: "double"
    kubernetes_object: "container"

    aggregation_functions:
    # Average memory RSS per container in a deployment
    - function: avg
      query: 'avg by(container, namespace)(avg_over_time(container_memory_rss{container!="", container!="POD", pod!="", namespace=$NAMESPACE$, container=”$CONTAINER_NAME$”}[15m]))'

    # Approx minimum memory RSS per container in a deployment
    - function: min
      query: 'min by(container, namespace)(min_over_time(container_memory_rss{container!="", container!="POD", pod!="", namespace=$NAMESPACE$, container="$CONTAINER_NAME$"}[15m]))'


    # Approx maximum memory RSS per container in a deployment
    - function: max
      query: 'max by(container, namespace)(max_over_time(container_memory_rss{container!="", container!="POD", pod!="", namespace=$NAMESPACE$, container="$CONTAINER_NAME$"}[15m]))'

    # Sum of memory RSS for a contianer in all pods of a deployment
    - function: sum
      query: 'sum by(container, namespace)(avg_over_time(container_memory_rss{container!="", container!="POD", pod!="", namespace=$NAMESPACE$, container=”$CONTAINER_NAME$”}[15m]))'

    ## namespace related queries

    # Namespace quota for CPU requests
    # Show namespace quota for CPU requests in cores for a namespace
  - name: namespaceCpuRequest
    datasource: prometheus
    value_type: "double"
    kubernetes_object: "namespace"
    aggregation_functions:
    # sum of all cpu request quotas for a namespace in cores
    - function: sum
      query: 'sum by (namespace) (kube_resourcequota{namespace="$NAMESPACE$", resource="requests.cpu", type="hard"})'

    # Namespace quota for CPU limits
    # Show namespace quota for CPU limits in cores for a namespace
  - name: namespaceCpuLimit
    datasource: prometheus
    value_type: "double"
    kubernetes_object: "namespace"
    aggregation_functions:
    # sum of all cpu limits quotas for a namespace in cores
    - function: sum
      query: 'sum by (namespace) (kube_resourcequota{namespace="$NAMESPACE$", resource="limits.cpu", type="hard"})'


    # Namespace quota for memory requests
    # Show namespace quota for memory requests in bytes for a namespace
  - name: namespaceMemoryRequest
    datasource: prometheus
    value_type: "double"
    kubernetes_object: "namespace"
    aggregation_functions:
    # sum of all memory requests quotas for a namespace in bytes
    - function: sum
      query: 'sum by (namespace) (kube_resourcequota{namespace="$NAMESPACE$", resource="requests.memory", type="hard"})'


    # Namespace quota for memory limits
    # Show namespace quota for memory limits in bytes for a namespace
  - name: namespaceMemoryLimit
    datasource: prometheus
    value_type: "double"
    kubernetes_object: "namespace"
    aggregation_functions:
    # sum of all memory limits quotas for a namespace in bytes
    - function: sum
      query: 'sum by (namespace) (kube_resourcequota{namespace="$NAMESPACE$", resource="limits.memory", type="hard"})'


    # Namespace CPU usage
    # Show cpu usages in cores for a namespace
  - name: namespaceCpuUsage
    datasource: prometheus
    value_type: "double"
    kubernetes_object: "namespace"
    aggregation_functions:
    # average cpu usages in cores for a namespace
    - function: avg
      query: 'avg_over_time(sum by(namespace) (node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{namespace="$NAMESPACE$", container!="", container!="POD", pod!=""})[15m:])'

    # maximum cpu usages in cores for a namespace
    - function: max
      query: 'max_over_time(sum by(namespace) (node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{namespace="$NAMESPACE$", container!="", container!="POD", pod!=""})[15m:])'

    # minimum cpu usages in cores for a namespace
    - function: min
      query: 'min_over_time(sum by(namespace) (node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{namespace="$NAMESPACE$", container!="", container!="POD", pod!=""})[15m:])'


    # Namespace CPU Throttle
    # Show cpu throttle in cores for a namespace
  - name: namespaceCpuThrottle
    datasource: prometheus
    value_type: "double"
    kubernetes_object: "namespace"
    aggregation_functions:
    # average cpu throttle in cores for a namespace
    - function: avg
      query: 'avg_over_time(sum by(namespace) (rate(container_cpu_cfs_throttled_seconds_total{namespace="$NAMESPACE$", container!="", container!="POD", pod!=""}[5m]))[15m:])'

    # maximum cpu throttle in cores for a namespace
    - function: max
      query: 'max_over_time(sum by(namespace) (rate(container_cpu_cfs_throttled_seconds_total{namespace="$NAMESPACE$", container!="", container!="POD", pod!=""}[5m]))[15m:])'

    # minimum cpu throttle in cores for a namespace
    - function: min
      query: 'min_over_time(sum by(namespace) (rate(container_cpu_cfs_throttled_seconds_total{namespace="$NAMESPACE$", container!="", container!="POD", pod!=""}[5m]))[15m:])'


    # Namespace memory usage
    # Show memory usages in bytes for a namespace
  - name: namespaceMemoryUsage
    datasource: prometheus
    value_type: "double"
    kubernetes_object: "namespace"
    aggregation_functions:
    # average memory usage in bytes for a namespace
    - function: avg
      query: 'avg_over_time(sum by(namespace) (container_memory_working_set_bytes{namespace="$NAMESPACE$", container!="", container!="POD", pod!=""})[15m:])'

    # maximum memory usage in bytes for a namespace
    - function: max
      query: 'max_over_time(sum by(namespace) (container_memory_working_set_bytes{namespace="$NAMESPACE$", container!="", container!="POD", pod!=""})[15m:])'

    # minimum memory usage in bytes for a namespace
    - function: min
      query: 'min_over_time(sum by(namespace) (container_memory_working_set_bytes{namespace="$NAMESPACE$", container!="", container!="POD", pod!=""})[15m:])'


    # Namespace memory rss value
    # Show memory rss in bytes for a namespace
  - name: namespaceMemoryRSS
    datasource: prometheus
    value_type: "double"
    kubernetes_object: "namespace"
    aggregation_functions:
    # average memory rss in bytes for a namespace
    - function: avg
      query: 'avg_over_time(sum by(namespace) (container_memory_rss{namespace="$NAMESPACE$", container!="", container!="POD", pod!=""})[15m:])'

    # maximum memory rss in bytes for a namespace
    - function: max
      query: 'max_over_time(sum by(namespace) (container_memory_rss{namespace="$NAMESPACE$", container!="", container!="POD", pod!=""})[15m:])'

    # minimum memory rss in bytes for a namespace
    - function: min
      query: 'min_over_time(sum by(namespace) (container_memory_rss{namespace="$NAMESPACE$", container!="", container!="POD", pod!=""})[15m:])'


    # Show total pods in a namespace
  - name: namespaceTotalPods
    datasource: prometheus
    value_type: "double"
    kubernetes_object: "namespace"
    aggregation_functions:
    # maximum total pods in a namespace
    - function: max
      query: 'max_over_time(sum by(namespace) ((kube_pod_info{namespace="$NAMESPACE$"}))[15m:])'
    # average total pods in a namespace
    - function: avg
      query: 'avg_over_time(sum by(namespace) ((kube_pod_info{namespace="$NAMESPACE$"}))[15m:])'


    # Show total running pods in a namespace
  - name: namespaceRunningPods
    datasource: prometheus
    value_type: "double"
    kubernetes_object: "namespace"
    aggregation_functions:
    # maximum total pods in a namespace
    - function: max
      query: 'max_over_time(sum by(namespace) ((kube_pod_status_phase{phase="Running"}))[15m:])'
    # average total pods in a namespace
    - function: avg
      query: 'avg_over_time(sum by(namespace) ((kube_pod_status_phase{phase="Running"}))[15m:])'

    # Show last activity for a namespace
  - name: namespaceMaxDate
    datasource: prometheus
    value_type: "double"
    kubernetes_object: "namespace"
    aggregation_functions:
    - function: max
      query: 'max(last_over_time(timestamp((sum by (namespace) (container_cpu_usage_seconds_total{namespace="$NAMESPACE$"})) > 0 )[15d:]))'

    # GPU Related metrics

    # Accelerator Core Usage
  - name: acceleratorCoreUsage
    datasource: prometheus
    value_type: "double"
    kubernetes_object: "container"
    aggregation_functions:
      - function: min
        query: 'min(min_over_time(DCGM_FI_DEV_GPU_UTIL{exported_namespace != "", exported_container != "", exported_pod != ""}[15m])) by (modelName, exported_container, exported_namespace, exported_pod, Hostname)'
      - function: max
        query: 'max(max_over_time(DCGM_FI_DEV_GPU_UTIL{exported_namespace != "", exported_container != "", exported_pod != ""}[15m])) by (modelName, exported_container, exported_namespace, exported_pod, Hostname)'
      - function: avg
        query: 'avg(avg_over_time(DCGM_FI_DEV_GPU_UTIL{exported_namespace != "", exported_container != "", exported_pod != ""}[15m])) by (modelName, exported_container, exported_namespace, exported_pod, Hostname)'

    # Accelerator Memory Usage
  - name: acceleratorMemoryUsage
    datasource: prometheus
    value_type: "double"
    kubernetes_object: "container"
    aggregation_functions:
      - function: min
        query: 'min(min_over_time(DCGM_FI_DEV_MEM_COPY_UTIL{exported_namespace != "", exported_container != "", exported_pod != ""}[15m])) by (modelName, exported_container, exported_namespace, exported_pod, Hostname)'
      - function: max
        query: 'max(max_over_time(DCGM_FI_DEV_MEM_COPY_UTIL{exported_namespace != "", exported_container != "", exported_pod != ""}[15m])) by (modelName, exported_container, exported_namespace, exported_pod, Hostname)'
      - function: avg
        query: 'avg(avg_over_time(DCGM_FI_DEV_MEM_COPY_UTIL{exported_namespace != "", exported_container != "", exported_pod != ""}[15m])) by (modelName, exported_container, exported_namespace, exported_pod, Hostname)'

    # Accelerator Frame Buffer Usage
  - name: acceleratorFrameBufferUsage
    datasource: prometheus
    value_type: "double"
    kubernetes_object: "container"
    aggregation_functions:
      - function: min
        query: 'min(min_over_time(DCGM_FI_DEV_FB_USED{exported_namespace != "", exported_container != "", exported_pod != ""}[15m])) by (modelName, GPU_I_PROFILE, exported_container, exported_namespace, exported_pod, Hostname)'
      - function: max
        query: 'max(max_over_time(DCGM_FI_DEV_FB_USED{exported_namespace != "", exported_container != "", exported_pod != ""}[15m])) by (modelName, GPU_I_PROFILE, exported_container, exported_namespace, exported_pod, Hostname)'
      - function: avg
        query: 'avg(avg_over_time(DCGM_FI_DEV_FB_USED{exported_namespace != "", exported_container != "", exported_pod != ""}[15m])) by (modelName, GPU_I_PROFILE, exported_container, exported_namespace, exported_pod, Hostname)'
